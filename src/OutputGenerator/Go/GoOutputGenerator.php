<?php

declare(strict_types=1);

namespace Riverwaysoft\PhpConverter\OutputGenerator\Go;

use Exception;
use Riverwaysoft\PhpConverter\Ast\ConverterResult;
use Riverwaysoft\PhpConverter\Dto\DtoClassProperty;
use Riverwaysoft\PhpConverter\Dto\DtoEnumProperty;
use Riverwaysoft\PhpConverter\Dto\DtoList;
use Riverwaysoft\PhpConverter\Dto\DtoType;
use Riverwaysoft\PhpConverter\Dto\ExpressionType;
use Riverwaysoft\PhpConverter\OutputGenerator\OutputGeneratorInterface;
use Riverwaysoft\PhpConverter\OutputGenerator\PropertyNameGeneratorInterface;
use Riverwaysoft\PhpConverter\OutputWriter\OutputFile;
use Riverwaysoft\PhpConverter\OutputWriter\OutputProcessor\OutputFilesProcessor;
use Riverwaysoft\PhpConverter\OutputWriter\OutputProcessor\PrependAutogeneratedNoticeFileProcessor;
use Riverwaysoft\PhpConverter\OutputWriter\OutputWriterInterface;
use function sprintf;

class GoOutputGenerator implements OutputGeneratorInterface
{
    /** @var PropertyNameGeneratorInterface[] */
    private array $propertyNameGenerators;

    /** @param PropertyNameGeneratorInterface[] $propertyNameGenerators */
    public function __construct(
        private OutputWriterInterface $outputWriter,
        private GoTypeResolver $typeResolver,
        private ?OutputFilesProcessor $outputFilesProcessor = null,
        array $propertyNameGenerators = [],
    ) {
        $this->outputFilesProcessor = $this->outputFilesProcessor ?? new OutputFilesProcessor(
            [
                new PrependAutogeneratedNoticeFileProcessor(
                    text: <<<TEXT
// THE FILE WAS AUTOGENERATED USING PHP-CONVERTER. PLEASE DO NOT EDIT IT!
// THE FILE WAS AUTOGENERATED USING PHP-CONVERTER. PLEASE DO NOT EDIT IT!
// THE FILE WAS AUTOGENERATED USING PHP-CONVERTER. PLEASE DO NOT EDIT IT!

package gen


TEXT
                ),
            ]
        );
        $this->propertyNameGenerators = $propertyNameGenerators ?: [
            new GoPropertyNameGenerator(),
        ];
    }

    /** @return OutputFile[] */
    public function generate(ConverterResult $converterResult): array
    {
        $this->outputWriter->reset();

        $dtoList = $converterResult->dtoList;
        foreach ($dtoList->getList() as $dto) {
            $result = $this->convertToGoType($dto, $dtoList);
            $this->outputWriter->writeType($result, $dto);
        }

        $files = $this->outputWriter->getTypes();

        return $this->outputFilesProcessor->process($files);
    }

    /** @var string[] */
    private array $usedConstantsStore = [];

    private function convertToGoType(DtoType $dto, DtoList $dtoList): string
    {
        if ($dto->getExpressionType()->equals(ExpressionType::class())) {
            $typeName = $dto->getName();
            $convertedProperties = '';

            /** @param DtoClassProperty[] $properties */
            $properties = $dto->getProperties();
            foreach ($properties as $property) {
                $convertedProperties .= sprintf(
                    "\n  %s %s",
                    $this
                        ->getPropertyNameGenerator($dto)
                        ->generate($property),
                    $this->typeResolver->getTypeFromPhp(
                        $property->getType(),
                        $dto,
                        $dtoList
                    )
                );
            }

            return sprintf(
                "type %s struct {%s\n}",
                $typeName,
                $convertedProperties
            );
        }
        if ($dto->getExpressionType()->isAnyEnum()) {
            $firstEnumProperty = $dto->getProperties()[0] ?? null;
            if ($firstEnumProperty === null) {
                throw new Exception('Enum must have at least one property');
            }

            $firstEnumPropertyValue = $firstEnumProperty->getValue();
            if (is_int($firstEnumPropertyValue)) {
                $type = 'int';
            } elseif (is_string($firstEnumPropertyValue)) {
                $type = 'string';
            } else {
                $type = 'any';
            }

            return sprintf(
                "type %s %s \n\nconst(%s\n)",
                $dto->getName(),
                $type,
                $this->convertEnumToTypeScriptEnumProperties(
                    $dto->getProperties(),
                    $dto->getName(),
                )
            );
        }
        throw new Exception(
            'Unknown expression type ' .
            $dto->getExpressionType()->jsonSerialize()
        );
    }

    private function getPropertyNameGenerator(
        DtoType $dto
    ): PropertyNameGeneratorInterface {
        if (count($this->propertyNameGenerators) === 1) {
            return $this->propertyNameGenerators[0];
        }

        foreach ($this->propertyNameGenerators as $propertyNameGenerator) {
            if ($propertyNameGenerator->supports($dto)) {
                return $propertyNameGenerator;
            }
        }

        throw new Exception(
            'Property name generator not found for type ' . $dto->getName()
        );
    }

    /** @param DtoEnumProperty[] $properties */
    private function convertEnumToTypeScriptEnumProperties(
        array $properties,
        string $enumName
    ): string {
        $string = '';

        foreach ($properties as $property) {
            $propertyValue = $property->isNumeric()
                ? $property->getValue()
                : sprintf("\"%s\"", $property->getValue());

            $constName = $property->getName();
            if (in_array($constName, $this->usedConstantsStore)) {
                $constName .= $enumName;
            }

            if (array_key_exists($constName, $this->usedConstantsStore)) {
                throw new Exception(
                    'Please rename constant ' . $constName
                );
            }
            $this->usedConstantsStore[] = $constName;

            $string .= sprintf(
                "\n  %s %s = %s",
                $constName,
                $enumName,
                $propertyValue
            );
        }

        return $string;
    }
}
