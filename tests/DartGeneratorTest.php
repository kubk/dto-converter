<?php

declare(strict_types=1);

namespace App\Tests;

use App\Tests\SnapshotComparator\DartSnapshotComparator;
use App\Tests\SnapshotComparator\TypeScriptSnapshotComparator;
use PHPUnit\Framework\TestCase;
use Riverwaysoft\DtoConverter\Ast\Converter;
use Riverwaysoft\DtoConverter\Bridge\ApiPlatform\ApiPlatformInputTypeResolver;
use Riverwaysoft\DtoConverter\ClassFilter\DocBlockCommentFilter;
use Riverwaysoft\DtoConverter\ClassFilter\NegationFilter;
use Riverwaysoft\DtoConverter\ClassFilter\PhpAttributeFilter;
use Riverwaysoft\DtoConverter\CodeProvider\FileSystemCodeProvider;
use Riverwaysoft\DtoConverter\Language\Dart\DartGenerator;
use Riverwaysoft\DtoConverter\Language\Dart\DartImportGenerator;
use Riverwaysoft\DtoConverter\Language\TypeScript\TypeScriptGenerator;
use Riverwaysoft\DtoConverter\Language\TypeScript\TypeScriptGeneratorOptions;
use Riverwaysoft\DtoConverter\Language\TypeScript\TypeScriptImportGenerator;
use Riverwaysoft\DtoConverter\Language\UnknownTypeResolver\ClassNameTypeResolver;
use Riverwaysoft\DtoConverter\Language\UnknownTypeResolver\DateTimeTypeResolver;
use Riverwaysoft\DtoConverter\OutputWriter\EntityPerClassOutputWriter\DtoTypeDependencyCalculator;
use Riverwaysoft\DtoConverter\OutputWriter\EntityPerClassOutputWriter\EntityPerClassOutputWriter;
use Riverwaysoft\DtoConverter\OutputWriter\EntityPerClassOutputWriter\KebabCaseFileNameGenerator;
use Riverwaysoft\DtoConverter\OutputWriter\EntityPerClassOutputWriter\SnakeCaseFileNameGenerator;
use Riverwaysoft\DtoConverter\OutputWriter\OutputProcessor\OutputFilesProcessor;
use Riverwaysoft\DtoConverter\OutputWriter\OutputProcessor\PrependAutogeneratedNoticeFileProcessor;
use Riverwaysoft\DtoConverter\OutputWriter\SingleFileOutputWriter\SingleFileOutputWriter;
use Spatie\Snapshots\MatchesSnapshots;

class DartGeneratorTest extends TestCase
{
    use MatchesSnapshots;

    public function testDart(): void
    {
        $codeDart = <<<'CODE'
<?php

use MyCLabs\Enum\Enum;

final class ColorEnum extends Enum
{
    private const RED = 0;
    private const GREEN = 1;
    private const BLUE = 2;
}

class Category
{
    public string $id;
    public string $title;
    public int $rating;
    /** @var Recipe[] */
    public array $recipes;
}

class Recipe
{
    public string $id;
    public ?string $imageUrl;
    public string|null $url;
    public bool $isCooked;
    public float $weight;
}

class User
{
    public string $id;
    public ?User $bestFriend;
    /** @var User[] */
    public array $friends;
    public ColorEnum $themeColor;
}
CODE;

        $normalized = (new Converter())->convert([$codeDart]);

        $results = (new DartGenerator(
            new SingleFileOutputWriter('generated.dart'),
            [new ClassNameTypeResolver()],
            new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ])
        ))->generate($normalized);

        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new DartSnapshotComparator());
    }

    public function testEntityPerClassOutputWriterDart(): void
    {
        $codeNestedDto = <<<'CODE'
<?php

class UserCreate {
    public string $id;
    public ?Profile $profile;
}

class FullName {
    public string $firstName;
    public string $lastName;
}

class Profile {
    public FullName|null|string $name;
    public int $age;
}
CODE;
        $normalized = (new Converter())->convert([$codeNestedDto]);

        $fileNameGenerator = new SnakeCaseFileNameGenerator('.dart');
        $typeScriptGenerator = new DartGenerator(
            new EntityPerClassOutputWriter(
                $fileNameGenerator,
                new DartImportGenerator(
                    $fileNameGenerator,
                    new DtoTypeDependencyCalculator()
                )
            ),
            [
                new DateTimeTypeResolver(),
                new ClassNameTypeResolver(),
            ],
            new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ])
        );
        $results = $typeScriptGenerator->generate($normalized);

        $this->assertCount(3, $results);
        $this->assertMatchesSnapshot($results);
    }
}
