<?php

declare(strict_types=1);

namespace App\Tests;

use App\Tests\SnapshotComparator\TypeScriptSnapshotComparator;
use PHPUnit\Framework\TestCase;
use Riverwaysoft\DtoConverter\Ast\Converter;
use Riverwaysoft\DtoConverter\Bridge\ApiPlatform\ApiPlatformInputTypeResolver;
use Riverwaysoft\DtoConverter\ClassFilter\PhpAttributeFilter;
use Riverwaysoft\DtoConverter\CodeProvider\FileSystemCodeProvider;
use Riverwaysoft\DtoConverter\Language\TypeScript\TypeScriptGenerator;
use Riverwaysoft\DtoConverter\Language\TypeScript\TypeScriptGeneratorOptions;
use Riverwaysoft\DtoConverter\Language\TypeScript\TypeScriptImportGenerator;
use Riverwaysoft\DtoConverter\Language\UnknownTypeResolver\ClassNameTypeResolver;
use Riverwaysoft\DtoConverter\Language\UnknownTypeResolver\DateTimeTypeResolver;
use Riverwaysoft\DtoConverter\OutputWriter\EntityPerClassOutputWriter\DtoTypeDependencyCalculator;
use Riverwaysoft\DtoConverter\OutputWriter\EntityPerClassOutputWriter\EntityPerClassOutputWriter;
use Riverwaysoft\DtoConverter\OutputWriter\EntityPerClassOutputWriter\KebabCaseFileNameGenerator;
use Riverwaysoft\DtoConverter\OutputWriter\OutputProcessor\OutputFilesProcessor;
use Riverwaysoft\DtoConverter\OutputWriter\OutputProcessor\PrependAutogeneratedNoticeFileProcessor;
use Riverwaysoft\DtoConverter\OutputWriter\SingleFileOutputWriter\SingleFileOutputWriter;
use Spatie\Snapshots\MatchesSnapshots;

class TypeScriptGeneratorTest extends TestCase
{
    use MatchesSnapshots;

    private string $codeNestedDto = <<<'CODE'
<?php

class UserCreate {
    public string $id;
    public ?Profile $profile;
}

class FullName {
    public string $firstName;
    public string $lastName;
}

class Profile {
    public FullName|null|string $name;
    public int $age;
}
CODE;

    public function testNormalizationTsDefault(): void
    {
        $codeAttribute = <<<'CODE'
<?php

class UserCreate {
    /** @var string[] */
    public array $achievements;
    /** @var int[][] */
    public array $matrix;
    public ?string $name;
    public string|int|string|null|null $duplicatesInType;
    public int|string|float $age;
    public bool|null $isApproved;
    public float $latitude;
    public float $longitude;
    public mixed $mixed;
}

class CloudNotify {
    public function __construct(public string $id, public string|null $fcmToken, string $notPublicIgnoreMe)
    {
    }
}
CODE;

        $normalized = (new Converter())->convert([$codeAttribute]);
        $this->assertMatchesJsonSnapshot($normalized->getList());
        $results = (new TypeScriptGenerator(
            outputWriter: new SingleFileOutputWriter('generated.ts'),
            unknownTypeResolvers: [],
            options: null,
            outputFilesProcessor: new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ])
        ))->generate($normalized);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }

    public function testNestedDtoConvert(): void
    {
        $normalized = (new Converter())->convert([$this->codeNestedDto]);
        $results = (new TypeScriptGenerator(
            outputWriter: new SingleFileOutputWriter('generated.ts'),
            unknownTypeResolvers: [new ClassNameTypeResolver()],
            outputFilesProcessor: new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ])
        ))->generate($normalized);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }


    public function testUseTypeOverEnumTs(): void
    {
        $code = <<<'CODE'
<?php

use MyCLabs\Enum\Enum;

final class ColorEnum extends Enum
{
    private const RED = 0;
    private const GREEN = 1;
    private const BLUE = 2;
}

final class RoleEnum extends Enum
{
    private const ADMIN = 'admin';
    private const READER = 'reader';
    private const EDITOR = 'editor';
}

class User
{
    public string $id;
    public ColorEnum $themeColor;
    public RoleEnum $role;
}
CODE;

        $normalized = (new Converter())->convert([$code]);
        $typeScriptGenerator = new TypeScriptGenerator(
            new SingleFileOutputWriter('generated.ts'),
            [new ClassNameTypeResolver()],
            new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ]),
            new TypeScriptGeneratorOptions(useTypesInsteadOfEnums: true),
        );
        $results = $typeScriptGenerator->generate($normalized);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }

    public function testNormalizationDirectory(): void
    {
        $converter = new Converter();
        $fileProvider = new FileSystemCodeProvider('/\.php$/');
        $result = $converter->convert($fileProvider->getListings(__DIR__ . '/Fixtures'));
        $this->assertMatchesJsonSnapshot($result->getList());
        $results = (new TypeScriptGenerator(
            new SingleFileOutputWriter('generated.ts'),
            [new ClassNameTypeResolver()],
            new OutputFilesProcessor([new PrependAutogeneratedNoticeFileProcessor()]),
        )
        )->generate($result);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }

    public function testNormalizationWithCustomTypeResolvers(): void
    {
        $codeWithDateTime = <<<'CODE'
<?php

class UserCreate
{
    public \DateTimeImmutable $createdAt;
    public DateTime $updatedAt;
    public ?DateTimeImmutable $promotedAt;
}

class UserCreateConstructor
{
    public function __construct(
       public DateTimeImmutable $createdAt,
       public \DateTime $updatedAt,
       public ?\DateTimeImmutable $promotedAt,
    )
    {
    
    }
}
CODE;

        $converter = new Converter();
        $result = $converter->convert([$codeWithDateTime]);
        $typeScriptGenerator = new TypeScriptGenerator(
            new SingleFileOutputWriter('generated.ts'),
            [new ClassNameTypeResolver(), new DateTimeTypeResolver()],
            new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ])
        );
        $results = ($typeScriptGenerator)->generate($result);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }

    public function testEntityPerClassOutputWriterTypeScript(): void
    {
        $normalized = (new Converter())->convert([$this->codeNestedDto]);

        $fileNameGenerator = new KebabCaseFileNameGenerator('.ts');
        $typeScriptGenerator = new TypeScriptGenerator(
            new EntityPerClassOutputWriter(
                $fileNameGenerator,
                new TypeScriptImportGenerator(
                    $fileNameGenerator,
                    new DtoTypeDependencyCalculator()
                )
            ),
            [
                new DateTimeTypeResolver(),
                new ClassNameTypeResolver(),
            ]
        );
        $results = $typeScriptGenerator->generate($normalized);

        $this->assertCount(3, $results);
        $this->assertMatchesSnapshot($results);
    }

    public function testApiPlatformInput(): void
    {
        $codeWithDateTime = <<<'CODE'
<?php

use MyCLabs\Enum\Enum;

#[\Attribute(\Attribute::TARGET_CLASS)]
class Dto
{

}

#[Dto]
enum ColorEnum
{
    case RED = 0;
    case GREEN = 1;
    case BLUE = 2;
}

#[Dto]
final class GenderEnum extends Enum
{
    private const UNKNOWN = null;
    private const MAN = 0;
    private const WOMAN = 1;
}

class Profile
{
    public string $firstName;
    public string $lastName;
}

#[Dto]
class ProfileOutput
{
    public string $firstName;
    public string $lastName;
    public GenderEnum $gender;
    public ColorEnum $color;
}

class LocationEmbeddable {
  public function __construct(
    private float $lat,
    private $lan,
  ) {}
}

class Money {

}

class Industry {}

#[Dto]
class UserCreateInput
{
    /* The time when the user was promoted */
    public Profile $profile;
    // The time when the user was promoted
    public ?DateTimeImmutable $promotedAt;
    public ColorEnum $userTheme;
    /** @var Industry[]|null  */
    public array|null $industriesUnion = null;
    /** @var Industry[]|null  */
    public ?array $industriesNullable = null;
    public Money $money;
    public GenderEnum $gender;
    public LocationEmbeddable $location;
}

CODE;

        $converter = new Converter(new PhpAttributeFilter('Dto'));
        $result = $converter->convert([$codeWithDateTime]);
        $typeScriptGenerator = new TypeScriptGenerator(
            new SingleFileOutputWriter('generated.ts'),
            [
                new DateTimeTypeResolver(),
                new ApiPlatformInputTypeResolver([
                    'LocationEmbeddable' => '{ lat: string; lan: string }',
                    'Money' => '{ currency: string; amount: number }',
                ]),
                new ClassNameTypeResolver(),
            ],
            new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ])
        );
        $results = ($typeScriptGenerator)->generate($result);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());

        // use TS template literal
        $typeScriptGenerator = new TypeScriptGenerator(
            new SingleFileOutputWriter('generated.ts'),
            [
                new DateTimeTypeResolver(),
                new ApiPlatformInputTypeResolver([
                    'LocationEmbeddable' => '{ lat: string; lan: string }',
                    'Money' => '{ currency: string; amount: number }',
                ], true),
                new ClassNameTypeResolver(),
            ],
            new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ]),
        );
        $results = ($typeScriptGenerator)->generate($result);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }

    public function testUnknownTypeThrows(): void
    {
        $codeWithDateTime = <<<'CODE'
<?php

#[\Attribute(\Attribute::TARGET_CLASS)]
class Dto
{

}

#[Dto]
class A
{
    public \DateTimeImmutable $createdAt;
    public B $b;
}

class B {}
CODE;

        $converter = new Converter(new PhpAttributeFilter('Dto'));
        $result = $converter->convert([$codeWithDateTime]);
        $typeScriptGenerator = new TypeScriptGenerator(new SingleFileOutputWriter('generated.ts'), [new ClassNameTypeResolver(), new DateTimeTypeResolver()]);

        $this->expectExceptionMessage('PHP Type B is not supported. PHP class: A');
        $typeScriptGenerator->generate($result);
    }

    public function testDtoConstantDoesntThrow(): void
    {
        $codeWithDateTime = <<<'CODE'
<?php

#[Dto]
class A
{
    public const SOME_CONSTANT = 1;
    public \DateTimeImmutable $createdAt;
}

#[Dto]
final class GenderEnum extends Enum
{
    public const UNKNOWN = null;
    private const MAN = 0;
    private const WOMAN = 1;
}

CODE;

        $converter = new Converter(new PhpAttributeFilter('Dto'));
        $result = $converter->convert([$codeWithDateTime]);
        $typeScriptGenerator = new TypeScriptGenerator(new SingleFileOutputWriter('generated.ts'), [new ClassNameTypeResolver(), new DateTimeTypeResolver()]);

        $results = $typeScriptGenerator->generate($result);

        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }

    public function testPhp81SuccessWhenBacked(): void
    {
        $codeWithDateTime = <<<'CODE'
<?php

#[\Attribute(\Attribute::TARGET_CLASS)]
class Dto
{

}

#[Dto]
enum Color: int
{
    case RED = 0;
    case BLUE = 1;
    case WHITE = 2;
}

#[Dto]
enum Role: string
{
    case ADMIN = 'admin';
    case EDITOR = 'editor';
    case READER = 'reader';
}

#[Dto]
class User {
    public function __construct(public Color $color, public readonly int $user, public Role $role)
    {

    }

    public function getColor(): Color
    {
        return $this->color;
    }

    public function getUser(): int
    {
        return $this->user;
    }
}
CODE;

        $converter = new Converter(new PhpAttributeFilter('Dto'));
        $result = $converter->convert([$codeWithDateTime]);

        $typeScriptGenerator = new TypeScriptGenerator(
            new SingleFileOutputWriter('generated.ts'),
            [
                new ClassNameTypeResolver(),
            ],
            new OutputFilesProcessor([
                new PrependAutogeneratedNoticeFileProcessor(),
            ])
        );
        $results = ($typeScriptGenerator)->generate($result);
        $this->assertCount(1, $results);
        $this->assertMatchesSnapshot($results[0]->getContent(), new TypeScriptSnapshotComparator());
    }
}
